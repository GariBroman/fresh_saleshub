import os
import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, FSInputFile, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest

from app.config import CATEGORIES, SOUNDS_DIR
from app.keyboards.main_kb import (
    get_main_keyboard,
    get_second_level_keyboard,
    get_voice_bots_keyboard,
    get_text_bots_keyboard,
    get_file_keyboard,
    get_demo_keyboard,
    get_contact_keyboard
)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)

# –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback
router = Router()

# –¢–µ–∫—Å—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORY_TEXTS = {
    "voice": "üéô –ì–æ–ª–æ—Å–æ–≤—ã–µ –±–æ—Ç—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏.",
    "text": "üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –±–æ—Ç—ã –ø–æ–º–æ–≥–∞—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.",
    "media": "üì∑ –§–æ—Ç–æ-–≤–∏–¥–µ–æ –±–æ—Ç—ã –ø–æ–º–æ–≥–∞—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.",
    "dev": "üíª –ú—ã —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–¥ –≤–∞—à–∏ –±–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á–∏."
}

# –¢–µ–∫—Å—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≥–æ–ª–æ—Å–æ–≤—ã—Ö –±–æ—Ç–æ–≤
VOICE_CATEGORY_TEXTS = {
    "dentistry": "ü¶∑ –ì–æ–ª–æ—Å–æ–≤—ã–µ –±–æ—Ç—ã –¥–ª—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏:\n\n- –ü—Ä–∏–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—É\n- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏\n- –õ–∏–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É)\n- –û–±–∑–≤–æ–Ω \"—Å–ø—è—â–∏—Ö\" –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å —Ü–µ–ª—å—é –∞–∫—Ç–∏–≤–∏–∑–∞—Ü–∏–∏ (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ—Å–º–æ—Ç—Ä, —á–∏—Å—Ç–∫–∞ –∑—É–±–æ–≤ –∏ —Ç.–¥.)\n- –ê–∫—Ü–∏–æ–Ω–Ω—ã–µ –æ–±–∑–≤–æ–Ω—ã, –≤ —á–µ—Å—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤\n- SMS-—Ä–∞—Å—Å—ã–ª–∫–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–ø–∏—Å–∏\n- –ó–∞–ø–∏—Å—å –≤ –¥–µ—Ç—Å–∫—É—é —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—é",
    "barbershop": "üíá –ì–æ–ª–æ—Å–æ–≤—ã–µ –±–æ—Ç—ã –¥–ª—è —Å–∞–ª–æ–Ω–æ–≤ –∏ –±–∞—Ä–±–µ—Ä—à–æ–ø–æ–≤:\n\n- –û–±–∑–≤–æ–Ω –∫–ª–∏–µ–Ω—Ç–æ–≤ (–ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö)\n- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏—Ö–æ–¥–∞ –≤ —Å–∞–ª–æ–Ω\n- –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ (NPS)\n- –ó–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è\n- –õ–∏–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è —Å–∞–ª–æ–Ω–∞ (–∞–∫—Ü–∏–∏, —Å–∫–∏–¥–∫–∏ - –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤)\n- HR - –ø–æ–¥–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n- –ú–∞—Å—Å–∞–∂–∏",
    "cleaning": "üßπ –ì–æ–ª–æ—Å–æ–≤—ã–µ –±–æ—Ç—ã –¥–ª—è –∫–ª–∏–Ω–∏–Ω–≥–æ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π:\n\n- –ß–∏—Å—Ç–∫–∞ –Ω–∞ —É–ª–∏—Ü–µ\n- –ß–∏—Å—Ç–∫–∞ –¥–æ–º–∞/–∫–≤–∞—Ä—Ç–∏—Ä—ã",
    "jurisprudence": "‚öñÔ∏è –ì–æ–ª–æ—Å–æ–≤—ã–µ –±–æ—Ç—ã –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π:\n\n- –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É –Ω–æ—Ç–∞—Ä–∏—É—Å–∞ + \n- –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º/–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é/ –∫–æ–ª–ª–µ–≥–∏—è –∞–¥–≤–æ–∫–∞—Ç–æ–≤+\n- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—Å—Ç—Ä–µ—á–µ\n- NPS- –æ–ø—Ä–æ—Å –æ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–±–æ—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —é—Ä–∏—Å—Ç–∞\n- –¢–µ–ª-–±–æ—Ç –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –≤ –∏–Ω—Ç–µ—Ä–≤—å—é",
    "realestate": "üè¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ –±–æ—Ç—ã –¥–ª—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:\n\n- –û–ø—Ä–æ—Å –ø–æ –∫–∞—á–µ—Å—Ç–≤—É —É—Å–ª—É–≥\n- –õ–∏–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ –∞—Ä–µ–Ω–¥–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏+\n- –ü–∞—Ü–∏–µ–Ω—Ç–æ–≤ –æ–±–∑–≤–æ–Ω—ã –ø–æ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ–º –î–î–°+\n- –†–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä\n- –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∞—á–Ω—É—é –∏ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∞ –ø—Ä–∏–µ–º–∞-–ø–µ—Ä–µ–¥–∞—á–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–µ –æ—Ç –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫—É\n- HR - –ø–æ–¥–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
    "hr": "üë• –ì–æ–ª–æ—Å–æ–≤—ã–µ –±–æ—Ç—ã –¥–ª—è HR –∏ –Ω–∞–π–º–∞:\n\n- –û–±–∑–≤–æ–Ω –±–∞–∑—ã —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø—Ä–æ–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ\n- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏—Ö–æ–¥–∞ –Ω–∞ –≤ –¥–µ–Ω—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è+\n- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —è–≤–∫–∏ –ø–µ—Ä–µ–¥ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ–º\n- –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ –ø—Ä–∏–µ–º–µ –Ω–∞ —Ä–∞–±–æ—Ç—É"
}

# –¢–µ–∫—Å—Ç—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–æ—Ç–æ–≤
TEXT_CATEGORY_TEXTS = {
    "jurisprudence": "‚öñÔ∏è –¢–µ–∫—Å—Ç–æ–≤—ã–µ –±–æ—Ç—ã –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π –ø–æ–º–æ–≥–∞—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö.",
    "beauty": "üíÑ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –±–æ—Ç—ã –¥–ª—è —Å–∞–ª–æ–Ω–æ–≤ –∫—Ä–∞—Å–æ—Ç—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –∫–ª–∏–µ–Ω—Ç–∞–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
    "video": "üé¨ –í–∏–¥–µ–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–≥–ª—è–¥–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ä–∞–±–æ—Ç—É –±–æ—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö."
}

# –°—Å—ã–ª–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–æ—Ç–æ–≤
TEXT_LINKS = {
    "jurisprudence": "https://teletype.in/@airabbit/sJtZL7jMSsD",
    "beauty": "https://teletype.in/@airabbit/l3tWUBzLmHT",
    "video": "https://rutube.ru/video/547d599dcad8a2de4318199733c6985f/"
}

# –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏
CONTACT_LINKS = {
    "default": "@maximdeveloper",
    "voice": "@airabbitsaler_bot",
    "text": "@airabbitsaler_bot",
    "media": "@maximdeveloper",
    "dev": "@maximdeveloper"
}

# –ö–∞—Ä—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π subcategory –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Ñ–∞–π–ª–∞—Ö
AUDIO_KEYWORD_MAP = {
    "registration": ["–∑–∞–ø–∏—Å—å", "–ø—Ä–∏–µ–º", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä"],
    "reminder": ["–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–≤–∏–∑–∏—Ç"],
    "promo": ["–∞–∫—Ü–∏", "–æ–±–∑–≤–æ–Ω"],
    "sms": ["—Å–º—Å", "—Ä–∞—Å—Å—ã–ª–∫"],
    "kids": ["–¥–µ—Ç—Å–∫"],
    "lost": ["–ø–æ—Ç–µ—Ä—è–Ω", "–æ–±–∑–≤–æ–Ω"],
    "nps": ["nps", "–æ–ø—Ä–æ—Å"],
    "appointment": ["–∑–∞–ø–∏—Å—å", "–ø—Ä–∏–µ–º"],
    "outdoor": ["—É–ª–∏—Ü"],
    "indoor": ["–¥–æ–º", "–∫–≤–∞—Ä—Ç–∏—Ä"],
    "notary": ["–Ω–æ—Ç–∞—Ä–∏—É—Å"],
    "specialist": ["–ø–æ–¥–±–æ—Ä", "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"],
    "quality": ["–∫–∞—á–µ—Å—Ç–≤", "–æ–ø—Ä–æ—Å"],
    "rent": ["–∞—Ä–µ–Ω–¥"],
    "contract": ["–¥–æ–≥–æ–≤–æ—Ä", "–¥–¥—É"],
    "view": ["–ø—Ä–æ—Å–º–æ—Ç—Ä"],
    "interview": ["—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ"],
    "confirm": ["–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "—è–≤–∫"],
    "hiring": ["–ø—Ä–∏–µ–º", "—Ä–∞–±–æ—Ç"]
}

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è)
WELCOME_MESSAGE = """AIRabbit ‚Äì —ç–∫—Å–ø–µ—Ä—Ç—ã –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞! üìà

–ú—ã –≤–Ω–µ–¥—Ä—è–µ–º —É–º–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –±–æ—Ç–æ–≤ –Ω–∞ –±–∞–∑–µ –ò–ò, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É—é—Ç –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –ø–æ–≤—ã—à–∞—é—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏—é –Ω–∞ 20-30% üöÄ

–ù–∞—à–∏ –±–æ—Ç—ã —Å–ø–æ—Å–æ–±–Ω—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å:

üîπ –õ–∏–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è 
üîπ –û–∂–∏–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã 
üîπ –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è 
üîπ –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –ø–æ –≤–æ—Ä–æ–Ω–∫–µ –ø—Ä–æ–¥–∞–∂
üîπ –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è 
üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É 

‚ö° –ù–∞—á–Ω–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò —Ä–∞–Ω—å—à–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ —É–≤–µ–ª–∏—á—å—Ç–µ –ø—Ä–∏–±—ã–ª—å!"""

# –•—Ä–∞–Ω–µ–Ω–∏–µ ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π
sent_audio_messages = {}

# –•—Ä–∞–Ω–µ–Ω–∏–µ ID –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
main_menu_messages = {}

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
processing_states = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def send_all_audio_files(callback: CallbackQuery, category: str):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback.from_user.id
    if user_id in processing_states and processing_states[user_id]:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
        return False
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_states[user_id] = True
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        category_dir = SOUNDS_DIR / category
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if not os.path.exists(category_dir):
            logger.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await callback.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            processing_states[user_id] = False
            return False
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ MP3 —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            audio_files = [f for f in os.listdir(category_dir) if f.lower().endswith('.mp3')]
            
            if not audio_files:
                logger.warning(f"–ù–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{category}'")
                await callback.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                processing_states[user_id] = False
                return False
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            sent_audio_messages[user_id] = []
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω—é
            main_menu_messages[user_id] = callback.message.message_id
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            category_name = CATEGORIES.get(category, category.capitalize())
            
            # –°–Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            # –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard = InlineKeyboardBuilder()
            keyboard.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_from_audios_{category}"))
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                text=f"–ü—Ä–∏–º–µ—Ä—ã –≥–æ–ª–æ—Å–æ–≤—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}:",
                reply_markup=keyboard.as_markup()
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            for file in audio_files:
                audio_path = category_dir / file
                audio_file = FSInputFile(audio_path)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
                audio_message = await callback.message.answer_audio(
                    audio=audio_file,
                    caption=f"–ü—Ä–∏–º–µ—Ä: {file.replace('.mp3', '').replace('_', ' ').capitalize()}",
                    reply_markup=None
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                sent_audio_messages[user_id].append(audio_message.message_id)
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(audio_files)} –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ: {e}", exc_info=True)
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ")
            return False
    finally:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        processing_states[user_id] = False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –ø–æ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def send_audio(callback: CallbackQuery, category: str, subcategory: str):
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    category_dir = SOUNDS_DIR / category
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists(category_dir):
        logger.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await callback.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return False
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ MP3 —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        audio_files = [f for f in os.listdir(category_dir) if f.lower().endswith('.mp3')]
        
        if not audio_files:
            logger.warning(f"–ù–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{category}'")
            await callback.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return False
        
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        selected_file = None
        keywords = AUDIO_KEYWORD_MAP.get(subcategory, [subcategory])
        
        logger.info(f"–ò—â–µ–º —Ñ–∞–π–ª –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{subcategory}' —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏: {keywords}")
        logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã: {audio_files}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for keyword in keywords:
            for file in audio_files:
                if keyword.lower() in file.lower():
                    selected_file = file
                    logger.info(f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{keyword}': {file}")
                    break
            if selected_file:
                break
                
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏—á–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª
        if not selected_file and audio_files:
            selected_file = audio_files[0]
            logger.info(f"–ü–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª: {selected_file}")
        
        if not selected_file:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{subcategory}'")
            await callback.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        audio_path = category_dir / selected_file
        audio_file = FSInputFile(audio_path)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = InlineKeyboardBuilder()
        keyboard.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_voice_{category}"))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
        await callback.message.answer_audio(
            audio=audio_file,
            caption=f"–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {CATEGORIES.get(category, category)}",
            reply_markup=keyboard.as_markup()
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª: {selected_file}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ")
        return False

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@router.callback_query(F.data.startswith("category_"))
async def process_category_selection(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ callback_data
    category = callback.data.split("_")[1]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.edit_text(
        text=CATEGORY_TEXTS.get(category, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"),
        reply_markup=get_second_level_keyboard(category)
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_category=category)

# –û–ø–∏—Å–∞–Ω–∏–µ –ò–ò-–º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞
MARKETER_DESCRIPTION = """–¢–≤–æ–π —Ç–æ–ø–æ–≤—ã–π –ò–ò-–º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥!üî•

–ú—ã –ø—Ä–æ–∫–∞—á–∞–ª–∏ –µ–≥–æ –ª—É—á—à–∏–º–∏ –∫–Ω–∏–≥–∞–º–∏ –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É üìö, –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è–º–∏ —Ç–æ–ø–æ–≤—ã—Ö —Å–ø–∏–∫–µ—Ä–æ–≤ –∏ —É—Å–ø–µ—à–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ –º–∏—Ä–æ–≤—ã—Ö –±—Ä–µ–Ω–¥–æ–≤ üåç

üîπ –ó–∞–≥—Ä—É–∑–∏ —Å–≤–æ–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–ª–∏ –æ–ø–∏—à–∏ —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é 
üîπ –ü–æ—Å—Ç–∞–≤—å –∑–∞–¥–∞—á—É
üîπ –ü–æ–ª—É—á–∞–π –≥–æ—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è! 


‚úÖ –û–Ω –≤—Å—ë —Å–¥–µ–ª–∞–µ—Ç –∑–∞ —Ç–µ–±—è ‚Äì –±—ã—Å—Ç—Ä–æ, —Ç–æ—á–Ω–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ!"""

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ò–ò-–º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞
@router.callback_query(F.data == "marketer_bot")
async def process_marketer_selection(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="üöÄ –ü–µ—Ä–µ–π—Ç–∏ –∫ –ò–ò-–º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥—É", url="https://t.me/marketingairabbit_bot"))
    keyboard.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ò–ò-–º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞
    await callback.message.edit_text(
        text=MARKETER_DESCRIPTION,
        reply_markup=keyboard.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ "–ö–µ–π—Å—ã" –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data.startswith("cases_"))
async def process_cases_selection(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ callback_data
    category = callback.data.split("_")[1]
    
    # –î–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–æ—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if category == "voice":
        keyboard = get_voice_bots_keyboard()
        text = "üéô –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –±–æ—Ç–∞:"
    elif category == "text":
        keyboard = get_text_bots_keyboard()
        text = "üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞:"
    else:
        # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ò–ò-–º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞
        kb = InlineKeyboardBuilder()
        kb.row(InlineKeyboardButton(text="ü§ñ –ò–ò-–º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥", callback_data="marketer_bot"))
        kb.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_category_{category}"))
        keyboard = kb.as_markup()
        text = "üìä –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∫–µ–π—Å:"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        text=text,
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ "–°–≤—è–∑—å" –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data.startswith("contact_"))
async def process_contact_selection(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ callback_data
    category = callback.data.split("_")[1]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –∏—Å–ø–æ–ª—å–∑—É—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await callback.message.edit_text(
        text=f"üì± –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ {CATEGORY_TEXTS.get(category, '–≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É').lower()}",
        reply_markup=get_contact_keyboard(category)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –±–æ—Ç–æ–≤
@router.callback_query(F.data.startswith("voice_"))
async def process_voice_category(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ callback_data
    category = callback.data.split("_")[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∞—É–¥–∏–æ
    await state.update_data(main_message_id=callback.message.message_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
    await state.update_data(current_subcategory=category)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await send_all_audio_files(callback, category)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–æ—Ç–æ–≤ (–∫—Ä–æ–º–µ –¥–µ–º–æ)
@router.callback_query(lambda c: c.data.startswith("text_") and c.data != "text_demo")
async def process_text_category(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback.from_user.id
    if user_id in processing_states and processing_states[user_id]:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_states[user_id] = True
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ callback_data
        category = callback.data.split("_")[1]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        link = TEXT_LINKS.get(category, "https://example.com/case.pdf")
        
        # –î–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Ñ–∞–π–ª
        if category == "presentation":
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Ñ–∞–π–ª
                document = FSInputFile(link)
                sent_message = await callback.message.answer_document(
                    document=document,
                    caption="–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è AIRabbit",
                    reply_markup=InlineKeyboardBuilder().row(
                        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_text")
                    ).as_markup()
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                if user_id not in sent_audio_messages:
                    sent_audio_messages[user_id] = []
                sent_audio_messages[user_id].append(sent_message.message_id)
                
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await callback.message.delete()
                except TelegramBadRequest as e:
                    if "message to delete not found" in str(e).lower():
                        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ: {callback.message.message_id}")
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: {e}", exc_info=True)
                await callback.message.answer(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=InlineKeyboardBuilder().row(
                        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_text")
                    ).as_markup()
                )
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –ø—Ä—è–º–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            text = TEXT_CATEGORY_TEXTS.get(category, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–æ—Ç–∞—Ö:")
            text += f"\n\n<a href='{link}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–µ–π—Å</a>"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
            keyboard = InlineKeyboardBuilder()
            keyboard.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_text"))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback.message.edit_text(
                    text=text,
                    reply_markup=keyboard.as_markup(),
                    disable_web_page_preview=False  # –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫
                )
            except TelegramBadRequest as e:
                if "message to edit not found" in str(e).lower():
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {callback.message.message_id}")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    finally:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        processing_states[user_id] = False

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞—É–¥–∏–æ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π)
@router.callback_query(F.data.startswith("audio_"))
async def process_audio_request(callback: CallbackQuery, state: FSMContext):
    # audio_category_subcategory
    parts = callback.data.split("_")
    if len(parts) < 3:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    category = parts[1]
    subcategory = parts[2]
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ
    success = await send_audio(callback, category, subcategory)
    
    if not success:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—é
@router.callback_query(F.data == "get_demo")
async def process_demo_request(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    await callback.message.edit_text(
        text="üéÅ –°–æ–∑–¥–∞–¥–∏–º –Ω–µ–π—Ä–æ—Å—Å-—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏! –í—ã –ø–æ–ª—É—á–∏—Ç–µ –≤—ã–∑–æ–≤ –∏ –∫–∞—Å—Ç–∏–Ω–≥, –∏ –Ω–∞—à –±–æ—Ç –ø–æ–≥–æ–≤–æ—Ä–∏—Ç —Å –≤–∞–º–∏ –ª–∏—á–Ω–æ –∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤–∞—à —Å–∞–π—Ç.",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    await callback.message.edit_text(
        text=WELCOME_MESSAGE,
        reply_markup=get_main_keyboard()
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data.startswith("back_to_category_"))
async def back_to_category(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ callback_data
    category = callback.data.split("_")[3]
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫–æ –≤—Ç–æ—Ä–æ–º—É —É—Ä–æ–≤–Ω—é –º–µ–Ω—é
    await callback.message.edit_text(
        text=CATEGORY_TEXTS.get(category, "üìã –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"),
        reply_markup=get_second_level_keyboard(category)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é –≥–æ–ª–æ—Å–æ–≤—ã—Ö –±–æ—Ç–æ–≤
@router.callback_query(F.data == "back_to_voice")
async def back_to_voice(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    user_data = await state.get_data()
    category = user_data.get("current_category", "voice")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è
    if category == "voice":
        await callback.message.edit_text(
            text="üéô –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –±–æ—Ç–∞:",
            reply_markup=get_voice_bots_keyboard()
        )
    else:
        # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ voice, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await back_to_main(callback, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∞—É–¥–∏–æ
@router.callback_query(F.data.startswith("back_from_audios_"))
async def back_from_audios(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ callback_data
    category = callback.data.split("_")[3]
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∞—É–¥–∏–æ
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    
    if user_id in sent_audio_messages:
        for message_id in sent_audio_messages[user_id]:
            try:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
                await callback.bot.delete_message(chat_id=chat_id, message_id=message_id)
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id}")
            except TelegramBadRequest as e:
                if "message to delete not found" in str(e).lower():
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
            except Exception as e:
                logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
        
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        del sent_audio_messages[user_id]
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é 
    user_data = await state.get_data()
    root_category = user_data.get("current_category", "voice")
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–æ—Ç–æ—Ä–æ–µ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥")
    if root_category == "voice":
        await callback.message.edit_text(
            text="üéô –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –±–æ—Ç–∞:",
            reply_markup=get_voice_bots_keyboard()
        )
    else:
        await callback.message.edit_text(
            text=WELCOME_MESSAGE,
            reply_markup=get_main_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—Ç –∞—É–¥–∏–æ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data.startswith("back_to_voice_"))
async def back_from_audio(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ callback_data
    category = callback.data.split("_")[3]
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞—É–¥–∏–æ
    await callback.message.delete()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–æ—Ç–æ–≤
@router.callback_query(F.data == "back_to_text")
async def back_to_text(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback.from_user.id
    if user_id in processing_states and processing_states[user_id]:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_states[user_id] = True
    
    try:
        # –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã)
        chat_id = callback.message.chat.id
        
        if user_id in sent_audio_messages:
            for message_id in sent_audio_messages[user_id]:
                try:
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
                    await callback.bot.delete_message(chat_id=chat_id, message_id=message_id)
                    logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id}")
                except TelegramBadRequest as e:
                    if "message to delete not found" in str(e).lower():
                        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ")
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
                except Exception as e:
                    logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
            
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            del sent_audio_messages[user_id]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        user_data = await state.get_data()
        category = user_data.get("current_category", "text")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        try:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –º–µ–Ω—é
            if category == "text":
                await callback.message.edit_text(
                    text="üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞:",
                    reply_markup=get_text_bots_keyboard()
                )
            else:
                # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ text, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                await back_to_main(callback, state)
        except TelegramBadRequest as e:
            if "message to edit not found" in str(e).lower():
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await callback.message.answer(
                    text="üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞:",
                    reply_markup=get_text_bots_keyboard()
                )
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞: {e}")
                # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                await callback.message.answer(
                    text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞:",
                    reply_markup=get_text_bots_keyboard()
                )
    finally:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        processing_states[user_id] = False 

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–µ–º–∫–∞" –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–æ—Ç–∞—Ö
@router.callback_query(F.data == "text_demo")
async def process_text_demo(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    demo_text = """–°–æ–∑–¥–∞–¥–∏–º –¥–ª—è –≤–∞—Å –Ω–µ–π—Ä–æ-—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏! üî•

–ù–∞—à –ò–ò-–±–æ—Ç –ø—Ä–æ–≤–µ–¥—ë—Ç –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ —Ü–µ–ª–µ–≤–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é üéØ

üí° –•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –¥–µ–º–æ? 

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Å–∞–π—Ç –ø–æ —Å—Å—ã–ª–∫–µ –≤ –õ–° üí¨, –∏ –º—ã –≤—ã—à–ª–µ–º –≤–∞–º –≥–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É" –∏ "–ù–∞–∑–∞–¥"
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", url="https://t.me/Tupikov_A"))
    keyboard.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_text"))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        text=demo_text,
        reply_markup=keyboard.as_markup()
    ) 